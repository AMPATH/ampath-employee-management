{"ast":null,"code":"var _jsxFileName = \"/home/walter/Desktop/AmpathDemo/ampath-employee-management/front-end/src/Components/Employee/EmployeesList/employeesList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { DataTable, TableContainer, Table, TableToolbar, TableToolbarContent, TableToolbarSearch, TableHead, TableRow, TableHeader, TableBody, TableCell, Pagination, DataTableSkeleton, Button } from 'carbon-components-react';\nimport { getAllEmployees } from './employee.resource';\nimport dayjs from 'dayjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EmployeeList = () => {\n  _s();\n\n  const history = useHistory();\n  const [firstRowIndex, setFirstRowIndex] = React.useState(0);\n  const [currentPageSize, setCurrentPageSize] = React.useState(10);\n  const [employees, setEmployees] = React.useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const tableHeaders = useMemo(() => [{\n    key: 'id',\n    header: 'ID'\n  }, {\n    key: 'pfNumber',\n    header: 'PF Number'\n  }, {\n    key: 'name',\n    header: 'Name'\n  }, {\n    key: 'dob',\n    header: 'D.O.B'\n  }, {\n    key: 'gender',\n    header: 'Gender'\n  }, {\n    key: 'telephone',\n    header: 'Phone Number'\n  }, {\n    key: 'email',\n    header: 'Email'\n  }, {\n    key: 'kraPin',\n    header: 'KRA Pin'\n  }, {\n    key: 'nssf',\n    header: 'NSSF'\n  }, {\n    key: 'nhif',\n    header: 'NHIF'\n  }], []);\n  useMemo(() => {\n    getAllEmployees().then(res => {\n      const results = res.map(employee => {\n        return { ...employee,\n          id: employee.id,\n          name: `${employee.firstName} ${employee.lastName}`,\n          idNumber: employee.idNumber,\n          dob: dayjs(employee.dob).format('YYYY-MM-DD'),\n          age: employee.age,\n          telephone: employee.telephone,\n          email: employee.email,\n          gender: employee.gender,\n          kraPin: employee.kraPin,\n          nssf: employee.nssf,\n          nhif: employee.nhif,\n          pfNumber: employee.pfNumber,\n          salutation: employee.salutation\n        };\n      });\n      setEmployees(results);\n    });\n  }, []);\n\n  const filterField = (search, value) => value.toLowerCase().includes(search.toLowerCase());\n\n  const filteredEmployees = employees.filter(item => {\n    if (searchTerm === '') {\n      return item;\n    } else if (filterField(searchTerm, item.firstName) || filterField(searchTerm, item.lastName) || filterField(searchTerm, item.middleName) || item.pfNumber.toString().includes(searchTerm)) {\n      return item;\n    }\n  });\n\n  const getRowItems = rows => {\n    return rows.slice(firstRowIndex, firstRowIndex + currentPageSize).map(row => ({ ...row\n    }));\n  };\n\n  const rows = getRowItems(filteredEmployees);\n\n  const handleSearch = e => {\n    e.preventDefault();\n    setSearchTerm(e.target.value);\n  };\n\n  const handleRowClick = pfNumber => {\n    history.push(`/EmployeeProfile/${pfNumber}`);\n  };\n\n  const registerEmployee = () => {\n    history.push(`/EmployeeRegistration`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: employees.length > 0 ? /*#__PURE__*/_jsxDEV(DataTable, {\n      rows: rows,\n      headers: tableHeaders,\n      useZebraStyles: true,\n      children: ({\n        rows,\n        headers,\n        getHeaderProps,\n        getTableProps\n      }) => /*#__PURE__*/_jsxDEV(TableContainer, {\n        title: \"Employees List\",\n        style: {\n          marginTop: '10rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TableToolbar, {\n          children: /*#__PURE__*/_jsxDEV(TableToolbarContent, {\n            children: [/*#__PURE__*/_jsxDEV(TableToolbarSearch, {\n              persistent: true,\n              onChange: handleSearch\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              kind: \"secondary\",\n              onClick: registerEmployee,\n              children: \"Create New Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: headers.map(header => /*#__PURE__*/_jsxDEV(TableHeader, { ...getHeaderProps({\n                  header\n                }),\n                children: header.header\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n              onClick: () => handleRowClick(row.cells[1].value),\n              children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(TableCell, {\n                children: cell.value\n              }, cell.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 25\n              }, this))\n            }, row.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n          totalItems: filteredEmployees.length,\n          backwardText: \"Previous page\",\n          forwardText: \"Next page\",\n          itemsPerPageText: \"Items per page:\",\n          pageNumberText: \"Page Number\",\n          pageSize: currentPageSize,\n          pageSizes: [5, 10, 15, 20, 25],\n          onChange: ({\n            page,\n            pageSize\n          }) => {\n            if (pageSize !== currentPageSize) {\n              setCurrentPageSize(pageSize);\n            }\n\n            setFirstRowIndex(pageSize * (page - 1));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DataTableSkeleton, {\n      role: \"progressbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(EmployeeList, \"378MvXOV3Xii1CVP6FffEUAqDaQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = EmployeeList;\nexport default EmployeeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeList\");","map":{"version":3,"sources":["/home/walter/Desktop/AmpathDemo/ampath-employee-management/front-end/src/Components/Employee/EmployeesList/employeesList.tsx"],"names":["React","useMemo","useState","useHistory","DataTable","TableContainer","Table","TableToolbar","TableToolbarContent","TableToolbarSearch","TableHead","TableRow","TableHeader","TableBody","TableCell","Pagination","DataTableSkeleton","Button","getAllEmployees","dayjs","EmployeeList","history","firstRowIndex","setFirstRowIndex","currentPageSize","setCurrentPageSize","employees","setEmployees","searchTerm","setSearchTerm","tableHeaders","key","header","then","res","results","map","employee","id","name","firstName","lastName","idNumber","dob","format","age","telephone","email","gender","kraPin","nssf","nhif","pfNumber","salutation","filterField","search","value","toLowerCase","includes","filteredEmployees","filter","item","middleName","toString","getRowItems","rows","slice","row","handleSearch","e","preventDefault","target","handleRowClick","push","registerEmployee","length","headers","getHeaderProps","getTableProps","marginTop","cells","cell","page","pageSize"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  DataTable,\n  TableContainer,\n  Table,\n  TableToolbar,\n  TableToolbarContent,\n  TableToolbarSearch,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  DataTableRow,\n  DataTableHeader,\n  Pagination,\n  DataTableSkeleton,\n  Button,\n} from 'carbon-components-react';\nimport { Employee, getAllEmployees } from './employee.resource';\nimport dayjs from 'dayjs';\n\nconst EmployeeList: React.FC = () => {\n  const history = useHistory();\n  const [firstRowIndex, setFirstRowIndex] = React.useState(0);\n  const [currentPageSize, setCurrentPageSize] = React.useState(10);\n  const [employees, setEmployees] = React.useState<Array<Employee>>([]);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const tableHeaders: Array<DataTableHeader> = useMemo(\n    () => [\n      { key: 'id', header: 'ID' },\n      { key: 'pfNumber', header: 'PF Number' },\n      { key: 'name', header: 'Name' },\n      { key: 'dob', header: 'D.O.B' },\n      { key: 'gender', header: 'Gender' },\n      { key: 'telephone', header: 'Phone Number' },\n      { key: 'email', header: 'Email' },\n      { key: 'kraPin', header: 'KRA Pin' },\n      { key: 'nssf', header: 'NSSF' },\n      { key: 'nhif', header: 'NHIF' },\n    ],\n    [],\n  );\n\n  useMemo(() => {\n    getAllEmployees().then((res) => {\n      const results = res.map((employee: any) => {\n        return {\n          ...employee,\n          id: employee.id,\n          name: `${employee.firstName} ${employee.lastName}`,\n          idNumber: employee.idNumber,\n          dob: dayjs(employee.dob).format('YYYY-MM-DD'),\n          age: employee.age,\n          telephone: employee.telephone,\n          email: employee.email,\n          gender: employee.gender,\n          kraPin: employee.kraPin,\n          nssf: employee.nssf,\n          nhif: employee.nhif,\n          pfNumber: employee.pfNumber,\n          salutation: employee.salutation,\n        };\n      });\n      setEmployees(results);\n    });\n  }, []);\n\n  const filterField = (search: string, value: string) => value.toLowerCase().includes(search.toLowerCase());\n  const filteredEmployees = employees.filter((item) => {\n    if (searchTerm === '') {\n      return item;\n    } else if (\n      filterField(searchTerm, item.firstName) ||\n      filterField(searchTerm, item.lastName) ||\n      filterField(searchTerm, item.middleName) ||\n      item.pfNumber.toString().includes(searchTerm)\n    ) {\n      return item;\n    }\n  });\n  const getRowItems = (rows: Array<DataTableRow>) => {\n    return rows.slice(firstRowIndex, firstRowIndex + currentPageSize).map((row: any) => ({ ...row }));\n  };\n  const rows = getRowItems(filteredEmployees);\n\n  const handleSearch = (e: any) => {\n    e.preventDefault();\n    setSearchTerm(e.target.value);\n  };\n\n  const handleRowClick = (pfNumber: any) => {\n    history.push(`/EmployeeProfile/${pfNumber}`);\n  };\n\n  const registerEmployee = () => {\n    history.push(`/EmployeeRegistration`);\n  };\n  return (\n    <>\n      {employees.length > 0 ? (\n        <DataTable rows={rows} headers={tableHeaders} useZebraStyles>\n          {({\n            rows,\n            headers,\n            getHeaderProps,\n            getTableProps,\n          }: {\n            rows: any;\n            headers: any;\n            getHeaderProps: any;\n            getTableProps: any;\n          }) => (\n            <TableContainer title=\"Employees List\" style={{ marginTop: '10rem' }}>\n              <TableToolbar>\n                <TableToolbarContent>\n                  <TableToolbarSearch persistent={true} onChange={handleSearch} />\n                  <Button kind=\"secondary\" onClick={registerEmployee}>\n                    Create New Employee\n                  </Button>\n                </TableToolbarContent>\n              </TableToolbar>\n              <Table {...getTableProps()}>\n                <TableHead>\n                  <TableRow>\n                    {headers.map((header: any) => (\n                      <TableHeader {...getHeaderProps({ header })}>{header.header}</TableHeader>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map((row: any) => (\n                    <TableRow key={row.id} onClick={() => handleRowClick(row.cells[1].value)}>\n                      {row.cells.map((cell: any) => (\n                        <TableCell key={cell.id}>{cell.value}</TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              <Pagination\n                totalItems={filteredEmployees.length}\n                backwardText=\"Previous page\"\n                forwardText=\"Next page\"\n                itemsPerPageText=\"Items per page:\"\n                pageNumberText=\"Page Number\"\n                pageSize={currentPageSize}\n                pageSizes={[5, 10, 15, 20, 25]}\n                onChange={({ page, pageSize }) => {\n                  if (pageSize !== currentPageSize) {\n                    setCurrentPageSize(pageSize);\n                  }\n                  setFirstRowIndex(pageSize * (page - 1));\n                }}\n              />\n            </TableContainer>\n          )}\n        </DataTable>\n      ) : (\n        <DataTableSkeleton role=\"progressbar\" />\n      )}\n    </>\n  );\n};\nexport default EmployeeList;\n"]},"metadata":{},"sourceType":"module"}