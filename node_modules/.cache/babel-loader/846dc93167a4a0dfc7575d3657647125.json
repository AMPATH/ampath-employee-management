{"ast":null,"code":"const baseUrl = process.env.REACT_APP_URL;\nexport const saveEmployeeTrackingInformation = async values => {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'Application/json'\n    },\n    body: JSON.stringify(values)\n  };\n  return await fetch(baseUrl + 'movement', requestOptions).then(response => {\n    return response;\n  }).catch(error => {\n    return error;\n  });\n};\nexport const getProjects = async () => {\n  return await fetch(baseUrl + `project`).then(response => {\n    return response.json();\n  }).then(res => {\n    return res.data;\n  }).catch(error => {\n    return error;\n  });\n};\nexport const getDepartments = async () => {\n  return await fetch(baseUrl + `department`).then(response => {\n    return response.json();\n  }).then(res => {\n    return res.data;\n  }).catch(error => {\n    return error;\n  });\n};\nexport const getSites = async () => {\n  return await fetch(baseUrl + `site`).then(response => {\n    return response.json();\n  }).then(res => {\n    return res.data;\n  }).catch(error => {\n    return error;\n  });\n};\nexport const getCounties = async () => {\n  return await fetch(baseUrl + `county`).then(response => {\n    return response.json();\n  }).then(res => {\n    return res.data;\n  }).catch(error => {\n    return error;\n  });\n};\nexport const getBudgets = async () => {\n  return await fetch(baseUrl + `budget`).then(response => {\n    return response.json();\n  }).then(res => {\n    return res.data;\n  }).catch(error => {\n    return error;\n  });\n};\nexport const getPrograms = async () => {\n  return await fetch(baseUrl + `program`).then(response => {\n    return response.json();\n  }).then(res => {\n    return res.data;\n  }).catch(error => {\n    return error;\n  });\n};","map":{"version":3,"sources":["/home/walter/Desktop/AmpathDemo/ampath-employee-management/front-end/src/Components/Employee/Tracking/employee-tracking-resource.tsx"],"names":["baseUrl","process","env","REACT_APP_URL","saveEmployeeTrackingInformation","values","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","catch","error","getProjects","json","res","data","getDepartments","getSites","getCounties","getBudgets","getPrograms"],"mappings":"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","sourcesContent":["import { EmployeeTrackingInputProps } from './employee-tracking-types';\nconst baseUrl = process.env.REACT_APP_URL;\n\nexport const saveEmployeeTrackingInformation = async (values: EmployeeTrackingInputProps) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'Application/json' },\n    body: JSON.stringify(values),\n  };\n\n  return await fetch(baseUrl + 'movement', requestOptions)\n    .then((response) => {\n      return response;\n    })\n    .catch((error) => {\n      return error;\n    });\n};\n\nexport const getProjects = async () => {\n  return await fetch(baseUrl + `project`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((res) => {\n      return res.data;\n    })\n    .catch((error) => {\n      return error;\n    });\n};\n\nexport const getDepartments = async () => {\n  return await fetch(baseUrl + `department`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((res) => {\n      return res.data;\n    })\n    .catch((error) => {\n      return error;\n    });\n};\n\nexport const getSites = async () => {\n  return await fetch(baseUrl + `site`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((res: any) => {\n      return res.data;\n    })\n    .catch((error: any) => {\n      return error;\n    });\n};\n\nexport const getCounties = async () => {\n  return await fetch(baseUrl + `county`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((res: any) => {\n      return res.data;\n    })\n    .catch((error: any) => {\n      return error;\n    });\n};\n\nexport const getBudgets = async () => {\n  return await fetch(baseUrl + `budget`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((res: any) => {\n      return res.data;\n    })\n    .catch((error: any) => {\n      return error;\n    });\n};\n\nexport const getPrograms = async () => {\n  return await fetch(baseUrl + `program`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((res: any) => {\n      return res.data;\n    })\n    .catch((error: any) => {\n      return error;\n    });\n};\n"]},"metadata":{},"sourceType":"module"}